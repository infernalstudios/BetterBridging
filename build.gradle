buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://maven.parchmentmc.org' }

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle',           name: 'ForgeGradle', version: '5.1+',          changing: true
        classpath group: 'org.spongepowered',                   name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'gradle.plugin.com.modrinth.minotaur', name: 'Minotaur',    version: '1.2.1'
        classpath group: 'gradle.plugin.com.matthewprenger',    name: 'CurseGradle', version: '1.4.0'
        classpath group: 'org.parchmentmc.librarian.forgegradle', name: 'org.parchmentmc.librarian.forgegradle.gradle.plugin', version: '1.+'
    }
}

plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.matthewprenger.cursegradle'

ext.config = parseConfig(file('build.properties'))

version = config.VERSION
group = "${config.GROUP}.${config.ARTIFACT}"
archivesBaseName = "${config.ARCHIVES_BASE_NAME}-${config.MINECRAFT_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: config.MAPPINGS_CHANNEL, version: config.MAPPINGS_VERSION

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=betterbridging.mixins.json'
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                betterbridging {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=betterbridging.mixins.json'
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                betterbridging {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'betterbridging', '--all', '--output', file('src/generated/resources/')
            mods {
                betterbridging {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'betterbridging.refmap.json'
    config 'betterbridging.mixins.json'

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
}

configurations {
    packIntoJar {
        transitive = false
    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven/' }

    jcenter()
    mavenCentral()

    maven {
        url = 'https://maven.infernalstudios.org/' + (config.CONFIG_LIB_VERSION.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases')
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.MINECRAFT_VERSION}-${config.FORGE_VERSION}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation "org.infernalstudios:config:${config.CONFIG_LIB_VERSION}"
    packIntoJar "org.infernalstudios:config:${config.CONFIG_LIB_VERSION}"
}

shadowJar {
    classifier ''
    configurations = [project.configurations.packIntoJar]
    relocate 'org.infernalstudios.config', 'org.infernalstudios.foodeffects.config.library'
}

reobf {
    shadowJar {}
}

jar {
    classifier 'base'

    manifest {
        attributes([
                'Specification-Title'   : config.TITLE,
                'Specification-Vendor'  : config.AUTHOR,
                'Specification-Version' : '1',
                'Implementation-Title'  : config.TITLE,
                'Implementation-Version': config.VERSION,
                'Implementation-Vendor' : config.AUTHOR,
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.build.dependsOn shadowJar
tasks.build.dependsOn reobfShadowJar

//tasks.build.dependsOn sourcesJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = config.GROUP
            artifactId = config.ARTIFACT
            artifact jar
//            artifact sourcesJar
            version "${config.VERSION}-${config.MINECRAFT_VERSION}"

            pom {
                name = 'Better Bridging'
                url = 'https://infernalstudios.org/betterbridging'
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/infernalexp/Better-Bridging.git'
                    url = 'https://github.com/infernalexp/Better-Bridging'
                }
            }
        }
    }
    repositories {
        maven {
            url 'https://maven.infernalstudios.org/releases'

            credentials {
                username = System.getenv('MAVEN_USER')
                password = System.getenv('MAVEN_TOKEN')
            }

            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}